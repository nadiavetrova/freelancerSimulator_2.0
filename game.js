
function firstSlideInit() {
  const BTN = document.querySelector('.firstSlideBTN');
  const firstSlide = document.querySelector('.firstSlide');
  const secondSlide = document.querySelector('.secondSlide')

  BTN.addEventListener('click', nextSlide);

  function nextSlide(e) {
    const target = e.target;

    const isBtn = target.tagName = 'BUTTON';
    if (isBtn) {
      firstSlide.style.display = 'none';
      secondSlide.style.display = 'flex';
    }
  }
}
firstSlideInit()


function secondSlideInit() {
  const secondSlide = document.querySelector('.secondSlide');
  const secondSlideBTN = document.querySelector('.secondSlideBTN');
  const inputName = document.getElementById('secondSlideInputName');
  const errorMessage = document.querySelector('.secondSlideError');
  const nextSlideCharacter = document.querySelector('.characterSelection_box');
  secondSlideBTN.addEventListener('click', nextSlide);

  function nextSlide() {
    if (inputName.value === '') {
      errorMessage.classList.remove('hide')
      errorMessage.classList.add('active')
    }

    if (inputName.value !== '') {
      secondSlide.style.display = 'none';
      nextSlideCharacter.style.display = 'block';
    }
  }

  inputName.addEventListener('input', function () {
    if (inputName.value !== '') {
      errorMessage.classList.add('hideError');
      errorMessage.classList.remove('activeError');
    }
  });
}
secondSlideInit()


function characterSelectionInit() {
  const userNameInput = document.querySelector('.userName');
  const boy = document.querySelector("#boy");
  const girl = document.querySelector("#girl");
  const nextSlideBtn = document.querySelector('.characterSlideBTN');
  const characterSelection = document.querySelector('.characterSelection_box');
  const instructionsSection = document.querySelector('.instructionsSection_box');
  const characterSlideError = document.querySelector('.characterSlideError');
  const bubble = document.getElementById("playerPhrase");

  let selectedCharacter = localStorage.getItem('selectedCharacter');

  // –ü–æ–∫–∞–∑–∞—Ç—å —Ñ—Ä–∞–∑—É
  function showPhrase(text) {
    bubble.textContent = text;
    bubble.classList.remove("hidden");
  }

  // –ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É –ø–µ—Ä—Å–æ–Ω–∞–∂—É
  function applyCharacter(character) {
    if (character === 'boy') {
      boy.classList.add('characterImgBoy');
      girl.classList.remove('characterImgGirl');
      showPhrase(`${userNameInput.value}, —è –≥–æ—Ç–æ–≤ –∫–æ–¥–∏—Ç—å —Ö–æ—Ç—å –Ω–∞ –∫–∞—Ä—Ç–æ—à–∫–µ! –ì–ª–∞–≤–Ω–æ–µ ‚Äî –¥–µ–¥–ª–∞–π–Ω—ã –Ω–µ –∂–º—É—Ç.`);
    } else if (character === 'girl') {
      girl.classList.add('characterImgGirl');
      boy.classList.remove('characterImgBoy');
      showPhrase(`${userNameInput.value}, —É –º–µ–Ω—è –≤ –≥–æ–ª–æ–≤–µ –ø–æ—Ä—è–¥–æ–∫, –≤ –∫–æ–¥–µ ‚Äî –∫—Ä–∞—Å–æ—Ç–∞. –ü–æ–≥–Ω–∞–ª–∏!`);
    }
  }

  // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–±–æ—Ä –≤ localStorage –∏ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –≤–∏–∑—É–∞–ª—å–Ω–æ
  function selectCharacter(character) {
    selectedCharacter = character;
    localStorage.setItem('selectedCharacter', character);
    applyCharacter(character);
  }

  // –ù–∞–≤–µ—à–∏–≤–∞–µ–º —Å–æ–±—ã—Ç–∏—è –Ω–∞ –≤—ã–±–æ—Ä –ø–µ—Ä—Å–æ–Ω–∞–∂–∞
  boy.addEventListener("click", () => selectCharacter('boy'));
  girl.addEventListener("click", () => selectCharacter('girl'));

  // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —Å–ª–∞–π–¥
  nextSlideBtn.addEventListener('click', () => {
    if (selectedCharacter) {
      characterSelection.style.display = 'none';
      instructionsSection.style.display = 'block';
    } else {
      characterSlideError.classList.remove('hide');
      characterSlideError.classList.add('active');
    }
  });

  // –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏–º–µ–Ω–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π –≤—ã–±–æ—Ä
  if (selectedCharacter) {
    applyCharacter(selectedCharacter);
  }

  console.log("–í—ã–±—Ä–∞–Ω –ø–µ—Ä—Å–æ–Ω–∞–∂:", selectedCharacter);

  document.getElementById('character').src = `img/${selectedCharacter}Main.png`;
}
characterSelectionInit();


function initPlayerHUD() {
  function updateCountdown() {
    const startTime = localStorage.getItem('gameStartTime');
    if (!startTime) {
      document.getElementById("endTime").textContent = "‚Äî";
      return;
    }

    const now = new Date();
    const endTime = new Date(parseInt(startTime, 10) + 14 * 24 * 60 * 60 * 1000); // 14 –¥–Ω–µ–π
    const diff = endTime - now;

    if (diff <= 0) {
      document.getElementById("endTime").textContent = "–í—Ä–µ–º—è –≤—ã—à–ª–æ!";
      return;
    }

    const days = Math.floor(diff / (1000 * 60 * 60 * 24));
    const hours = Math.floor((diff / (1000 * 60 * 60)) % 24);
    const minutes = Math.floor((diff / (1000 * 60)) % 60);
    const seconds = Math.floor((diff / 1000) % 60);

    document.getElementById("endTime").textContent =
      `${days}–¥ ${hours}—á ${minutes}–º ${seconds}—Å`;
  }

  setInterval(updateCountdown, 1000);

  const instructionsBTN = document.querySelector('.instructionsBTN');
  const instructionsText = document.querySelector('.instructionsText');

  const texts = [
    `<span>‚è≥ –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –¥–Ω—è–º!</span> <br>
–í—ã—Ö–æ–¥–Ω—ã–µ (—Å—É–±–±–æ—Ç–∞ –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ) ‚Äî –Ω–µ–ª—å–∑—è –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–∫–∞–∑—ã. <br>
–ú–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ —É—á–∏—Ç—å—Å—è –∏–ª–∏ –æ—Ç–¥—ã—Ö–∞—Ç—å. <br>
–ï—Å–ª–∏ –Ω–∞—Ä—É—à–∏—à—å –ø—Ä–∞–≤–∏–ª–æ ‚Äî –ø–æ–ª—É—á–∏—à—å —à—Ç—Ä–∞—Ñ –ø–æ —ç–Ω–µ—Ä–≥–∏–∏ –∏ –æ–ø—ã—Ç—É. <br>
–ò–≥—Ä—É –º–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –≤ –ª—é–±–æ–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (–≤ —Ç–æ–º —á–∏—Å–ª–µ —Å —Å—É–±–±–æ—Ç—ã).`,

    `<span>–ù–∞ —ç–∫—Ä–∞–Ω–µ –ø–æ—è–≤–ª—è—é—Ç—Å—è –∑–∞–¥–∞–Ω–∏—è:</span> <br>
üìÑ –û–ø–∏—Å–∞–Ω–∏–µ ‚Äî —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∏–ª–∏ –∏–∑—É—á–∏—Ç—å. <br>
üí∞ –¶–µ–Ω–∞ ‚Äî —Å–∫–æ–ª—å–∫–æ –∑–∞–ø–ª–∞—Ç—è—Ç. <br>
‚è± –í—Ä–µ–º—è ‚Äî —Å–∫–æ–ª—å–∫–æ –∑–∞–π–º—ë—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ. <br>
–î–µ–π—Å—Ç–≤–∏—è: <br>
üîò –ü—Ä–∏–Ω—è—Ç—å ‚Äî –Ω–∞—á–∏–Ω–∞–µ—à—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ. <br>
‚úñ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏—à—å –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –∑–∞–∫–∞–∑—É.`,

    `<span>–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∏–≥—Ä–æ–∫–∞</span> <br>
–í –ø–∞–Ω–µ–ª–∏ —Å–ª–µ–≤–∞ –≤—Å–µ–≥–¥–∞ –≤–∏–¥–Ω–æ: <br>
üí∞ –î–µ–Ω—å–≥–∏ ‚Äî —Ç–≤–æ–π –±–∞–ª–∞–Ω—Å. <br>
‚ö° –≠–Ω–µ—Ä–≥–∏—è ‚Äî —Ç—Ä–∞—Ç–∏—Ç—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É –∏ —É—á—ë–±—É. –ï—Å–ª–∏ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è ‚Äî –ø—Ä–∏–¥—ë—Ç—Å—è –æ—Ç–¥—ã—Ö–∞—Ç—å. <br>
üìà –û–ø—ã—Ç ‚Äî –ø–æ–ª—É—á–∞–µ—à—å –∑–∞ –∑–∞–∫–∞–∑—ã –∏ –æ–±—É—á–µ–Ω–∏–µ. –ü—Ä–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–µ—Ä–µ—Ö–æ–¥–∏—à—å –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å. <br>
üìÖ –î–µ–Ω—å ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –ø—Ä–æ—à–ª–æ —Å –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã. <br>
üéØ –¶–µ–ª—å ‚Äî —Ç–≤–æ–π –ø–ª–∞–Ω (–¥–µ–Ω—å–≥–∏ + –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è).`,

    `<span>–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?</span>`
  ];

  let current = 0;

  // üëâ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—Ö–æ–¥–∏–ª –ª–∏ –∏–≥—Ä–æ–∫ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Ä–∞–Ω—å—à–µ
  if (localStorage.getItem('tutorialCompleted') === 'true') {
    // –ï—Å–ª–∏ –¥–∞ ‚Äî —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–≥—Ä—É (–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–∞–∂–µ –Ω–µ –≤—Å–ø—ã—Ö–Ω—É—Ç)
    document.querySelector('.game').style.display = 'block';
    updateCountdown();
    return;
  }

  // –ï—Å–ª–∏ –µ—â—ë –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π
  instructionsBTN.style.display = 'inline-block';
  instructionsText.style.display = 'block';

  instructionsBTN.addEventListener('click', function () {
    if (current < texts.length) {
      instructionsText.innerHTML = texts[current];
      current++;

      if (current === texts.length) {
        this.textContent = '–ù–∞—á–∞—Ç—å!';
      }
    } else {
      // –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ "–ù–∞—á–∞—Ç—å!" —Ñ–∏–∫—Å–∏—Ä—É–µ–º —Å—Ç–∞—Ä—Ç –≤—Ä–µ–º–µ–Ω–∏
      if (!localStorage.getItem('gameStartTime')) {
        localStorage.setItem('gameStartTime', Date.now());
      }

      // ‚úÖ –ó–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —É–∂–µ –ø—Ä–æ–π–¥–µ–Ω—ã
      localStorage.setItem('tutorialCompleted', 'true');

      updateCountdown();
      instructionsBTN.style.display = 'none';
      instructionsText.style.display = 'none';
      document.querySelector('.game').style.display = 'block';
    }
  });
}

initPlayerHUD();











async function gameStart() {
  const taskList = document.getElementById("taskList");
  const dailyLimitMessage = document.getElementById("dailyLimitMessage");

  // HUD —ç–ª–µ–º–µ–Ω—Ç—ã
  const expEl = document.getElementById("exp");
  const moneyEl = document.getElementById("money");
  const energyEl = document.getElementById("energy");

  // --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–∏–º–∏—Ç–∞ –Ω–∞ –¥–µ–Ω—å ---
  const DAILY_TASK_LIMIT = 3; // –í –î–ï–ù–¨ –†–û–í–ù–û 3 –ü–†–ï–î–õ–û–ñ–ï–ù–ò–Ø
  const ENERGY_RESTORE_TIME = 60 * 60 * 1000; // 1 —á–∞—Å –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

  // –ó–∞–≥—Ä—É–∂–∞–µ–º/–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ localStorage
  let player = JSON.parse(localStorage.getItem("player")) || {
    exp: 0,
    expToNext: 100,
    money: 0,
    energy: 100,
    maxEnergy: 100,
    offersToday: 0, // —Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –∑–∞–¥–∞—á —É–∂–µ –±—ã–ª–æ —Å–µ–≥–æ–¥–Ω—è (–ø—Ä–∏–Ω—è–ª –ò–õ–ò –æ—Ç–∫–∞–∑–∞–ª—Å—è)
    lastLogin: Date.now(),
    lastEnergyRestore: Date.now() // üîπ –Ω–æ–≤–æ–µ –ø–æ–ª–µ
  };

  const now = Date.now();
  const oneDay = 24 * 60 * 60 * 1000;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π –¥–µ–Ω—å
  if (now - player.lastLogin >= oneDay) {
    player.lastLogin = now;
    player.offersToday = 0;
    saveProgress();
  }

  // üîπ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏
  if (now - player.lastEnergyRestore >= ENERGY_RESTORE_TIME) {
    player.energy = player.maxEnergy;
    player.lastEnergyRestore = now;
    saveProgress();
  }

  function updateHUD() {
    expEl.textContent = player.exp;
    moneyEl.textContent = player.money;
    energyEl.textContent = `${player.energy} / ${player.maxEnergy}`;
  }

  function saveProgress() {
    localStorage.setItem("player", JSON.stringify(player));
  }

  // --- –ì—Ä—É–∑–∏–º –∑–∞–¥–∞—á–∏ ---
  const response = await fetch("stage.json");
  const data = await response.json();
  const tasks = Array.isArray(data?.specialTasks) ? data.specialTasks : [];

  if (!tasks.length) {
    taskList.innerHTML = `<li>–ó–∞–¥–∞—á –ø–æ–∫–∞ –Ω–µ—Ç. –î–æ–±–∞–≤—å –∏—Ö –≤ stage.json ‚Üí specialTasks</li>`;
    return;
  }

  const randInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;
  const pickRandomTask = () => tasks[randInt(0, tasks.length - 1)];

  function showNextTask() {
    if (player.offersToday >= DAILY_TASK_LIMIT) {
      dailyLimitMessage.style.display = "block";
      return;
    }
    dailyLimitMessage.style.display = "none";

    const task = pickRandomTask();
    const li = document.createElement("li");
    li.classList.add("task");
    li.innerHTML = `
      <h3>${task.name}</h3>
      <p>${task.description}</p>
      <p>üí∞ –ù–∞–≥—Ä–∞–¥–∞: ${task.rewards?.money ?? 0} –º–æ–Ω–µ—Ç</p>
      <p>‚≠ê –û–ø—ã—Ç: ${task.rewards?.exp ?? 0}</p>
      <p>‚ö° –≠–Ω–µ—Ä–≥–∏—è: -${task.energyWaste ?? 0}</p>
      <p>‚è≥ –í—Ä–µ–º—è: ${task.time ?? 0} –º–∏–Ω</p>
      ${task.link ? `<p><a href="${task.link}" target="_blank" rel="noopener">–ú–∞—Ç–µ—Ä–∏–∞–ª / —Å—Å—ã–ª–∫–∞</a></p>` : ""}
      <button class="acceptBtn">‚úÖ –í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É</button>
      <button class="declineBtn">‚ùå –û—Ç–∫–∞–∑–∞—Ç—å—Å—è</button>
    `;

    const acceptBtn = li.querySelector(".acceptBtn");
    const declineBtn = li.querySelector(".declineBtn");

    acceptBtn.addEventListener("click", () => acceptTask(task, li));
    declineBtn.addEventListener("click", () => declineTask(li));
    taskList.appendChild(li);
  }

  function acceptTask(task, li) {
    const need = Number(task.energyWaste ?? 0);
    if (player.energy < need) {
      showEnergyModal(task, li);
      return;
    }
    completeTask(task, li);
    consumeDailyOffer();
  }

  function declineTask(li) {
    li.remove();
    consumeDailyOffer();
  }

  function completeTask(task, li) {
    const spendEnergy = Number(task.energyWaste ?? 0);
    const rewardMoney = Number(task.rewards?.money ?? 0);
    const rewardExp = Number(task.rewards?.exp ?? 0);

    player.energy = Math.max(0, player.energy - spendEnergy);
    player.money += rewardMoney;
    player.exp += rewardExp;

    // üîπ –µ—Å–ª–∏ —ç–Ω–µ—Ä–≥–∏—è —É–ø–∞–ª–∞ ‚Üí —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è
    if (player.energy < player.maxEnergy) {
      player.lastEnergyRestore = Date.now();
    }

    updateHUD();
    saveProgress();
    li.remove();
  }

  function consumeDailyOffer() {
    player.offersToday += 1;
    saveProgress();

    if (player.offersToday >= DAILY_TASK_LIMIT) {
      dailyLimitMessage.style.display = "block";
    } else {
      showNextTask();
    }
  }

  function showEnergyModal(task, li) {
    const modal = document.getElementById("energyModal");
    const buyBtn = document.getElementById("buyEnergyBtn");
    const cancelBtn = document.getElementById("cancelEnergyBtn");

    if (!modal || !buyBtn || !cancelBtn) {
      alert("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ ‚ö°");
      return;
    }

    modal.style.display = "flex";

    buyBtn.onclick = null;
    cancelBtn.onclick = null;

    buyBtn.onclick = () => {
      const PRICE = 100;
      const RESTORE = 50;

      if (player.money >= PRICE) {
        player.money -= PRICE;
        player.energy = Math.min(player.maxEnergy, player.energy + RESTORE);

        if (player.energy === player.maxEnergy) {
          player.lastEnergyRestore = Date.now(); // —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
        }

        updateHUD();
        saveProgress();
        modal.style.display = "none";

        const need = Number(task.energyWaste ?? 0);
        if (player.energy >= need) {
          completeTask(task, li);
          consumeDailyOffer();
        }
      } else {
        alert("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç üí∏");
      }
    };

    cancelBtn.onclick = () => {
      modal.style.display = "none";
    };
  }

  // –°—Ç–∞—Ä—Ç
  updateHUD();

  if (player.offersToday < DAILY_TASK_LIMIT) {
    showNextTask();
  } else {
    dailyLimitMessage.style.display = "block";
  }
}

gameStart();







//   const orders = [
//     { text: "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑", money: 0, energy: 0, xp: 0 },
//     { text: "–°–¥–µ–ª–∞—Ç—å –ª–µ–Ω–¥–∏–Ω–≥ ‚Äî 100$", money: 100, energy: -30, xp: 5 },
//     { text: "–ü—Ä–∞–≤–∫–∏ –Ω–∞ —Å–∞–π—Ç–µ ‚Äî 50$", money: 50, energy: -25, xp: 3 },
//     { text: "–î–æ–±–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏ ‚Äî 30$", money: 30, energy: -10, xp: 2 }
//   ];

//   let currentIndex = 0;
//   let money = 0;
//   let energy = 100;
//   let xp = 0;

//   const orderText = document.getElementById('currentOrder');
//   const acceptBtn = document.getElementById('acceptBtn');
//   const skipBtn = document.getElementById('skipBtn');
//   const progressBar = document.getElementById('progressBar');
//   const progress = document.querySelector('.progress');
//   const moneyDisplay = document.getElementById('money');
//   const energyDisplay = document.getElementById('energy');
//   const xpDisplay = document.getElementById('xp');
//   const video = document.getElementById('video');

//   function loadOrder() {
//     if (currentIndex < orders.length) {
//       orderText.textContent = orders[currentIndex].text;
//     } else {
//       orderText.textContent = "–î–µ–¥–ª–∞–π–Ω—ã –Ω–µ –∂–¥—É—Ç, –∞ –±–∞—Ç–∞—Ä–µ–π–∫–∞ —Å–∞–¥–∏—Ç—Å—è. –ü–æ—Ä–∞ –±—ã –≤—ã–ø–∏—Ç—å –∫–æ—Ñ–µ...";
//       acceptBtn.textContent = "–î–æ –∑–∞–≤—Ç—Ä–∞!";
//       skipBtn.classList.add('hideBtn');

//       acceptBtn.addEventListener('click', lastMessage);
//       function lastMessage() {

//       }
//     }
//   }

//   acceptBtn.addEventListener('click', () => {
//     if (currentIndex === 0) {
//       progressBar.classList.remove('hidden');
//       progress.style.width = '0%';

//       setTimeout(() => {
//         progress.style.width = '100%';
//       }, 5000);
//     }
//     else {
//       orderText.style.display = 'none';
//       acceptBtn.style.display = 'none';
//       skipBtn.style.display = 'none';
//       video.style.display = 'block';
//       video.play();

//       video.addEventListener('ended', () => {
//         video.style.display = 'none';
//         orderText.style.display = 'block';
//         acceptBtn.style.display = 'inline-block';
//         skipBtn.style.display = 'inline-block';
//       });
//     }

//     setTimeout(() => {
//       const order = orders[currentIndex];
//       money += order.money;
//       energy += order.energy;
//       xp += order.xp;

//       moneyDisplay.textContent = money;
//       energyDisplay.textContent = energy + '%';
//       xpDisplay.textContent = xp + '%';

//       currentIndex++;
//       progressBar.classList.add('hidden');
//       loadOrder();

//       if (energy < 40) {
//         if (localStorage.getItem('selectedCharacter') === 'boy') {
//           character.src = 'img/tiredBoy.png'
//           console.log(character);
//         }
//         else {
//           character.src = 'img/tiredGirl.png'
//         }
//         // document.querySelector('.instructionsText_box').textContent = '–î–µ–¥–ª–∞–π–Ω—ã –Ω–µ –∂–¥—É—Ç, –∞ –±–∞—Ç–∞—Ä–µ–π–∫–∞ —Å–∞–¥–∏—Ç—Å—è. –ü–æ—Ä–∞ –±—ã –≤—ã–ø–∏—Ç—å –∫–æ—Ñ–µ...';
//       }
//     }, 5000);
//   });

//   skipBtn.addEventListener('click', () => {
//     currentIndex++;
//     loadOrder();
//   });

//   loadOrder();
